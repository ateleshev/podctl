#!/bin/sh

NAME=$(basename $0)
ACTION="${1}"

KUBECTL=$(which kubectl)
if [ ! "${KUBECTL}" ]; then
  echo "[error] kubectl is not found"
fi

DOCKER=$(which docker)
if [ ! "${DOCKER}" ]; then
  echo "[error] docker is not found"
fi

# Container ID
get_cid() {
  ${KUBECTL} get po ${1} -o jsonpath='{.status.containerStatuses[0].containerID}' | sed -e 's#^docker://##g'
}

get_pid() {
  CONTAINER_ID=$(show_cid "${1}")
  ${DOCKER} inspect --format '{{ .State.Pid }}' ${CONTAINER_ID}
}

# ==[ Main ]==

# List of PODs
show_list() {
  ${KUBECTL} get po ${1} -o wide
}

# Details of PODs
show_desc() {
  ${KUBECTL} describe po ${1}
}

# Container ID
show_cid() {
  if [ ! "${1}" ]; then
    echo "[error] <POD-NAME> not specified"
    exit 1
  fi

  echo $(get_cid "${1}")
}

# Process ID
show_pid() {
  if [ ! "${1}" ]; then
    echo "[error] <POD-NAME> not specified"
    exit 1
  fi

  echo $(get_pid "${1}")
}

# Help
show_help() {
  echo "----------------------------------------------------------------------------"
  echo "Usage: ${NAME} [list|desc|cid|pid|net{addr|link|route|...}] <POD-NAME> [...]"
  echo "----------------------------------------------------------------------------"
  echo "  - list: show list of a specific PODs                                      "
  echo "  - desc: show details of a specific PODs                                   "
  echo "  - cid: show container ID                                                  "
  echo "  - pid: show process ID                                                    "
  echo "  - net: show network configuration                                         "
  echo "----------------------------------------------------------------------------"
}

# --[ Network ]--

show_net() {
  case ${1} in
    addr)
      show_net_addr "${2}" "${3}"
    ;;
    link)
      show_net_link "${2}" "${3}"
    ;;
    route)
      show_net_route "${2}" "${3}"
    ;;
    flush)
      show_net_flush "${2}" "${3}"
    ;;
    *)
      show_net_help
    ;;
  esac
}

# Address
show_net_addr() {
  if [ ! "${1}" ]; then
    echo "[error] <POD-NAME> not specified"
    exit 1
  fi

  PID=$(get_pid "${1}")
  sudo nsenter -t "${PID}" -n ip address show ${2}
}

# Link
show_net_link() {
  if [ ! "${1}" ]; then
    echo "[error] <POD-NAME> not specified"
    exit 1
  fi

  PID=$(get_pid "${1}")
  sudo nsenter -t "${PID}" -n ip link show ${2}
}

# Route
show_net_route() {
  if [ ! "${1}" ]; then
    echo "[error] <POD-NAME> not specified"
    exit 1
  fi

  PID=$(get_pid "${1}")
  sudo nsenter -t "${PID}" -n ip route show ${2}
}

# Flush
show_net_flush() {
  if [ ! "${1}" ]; then
    echo "[error] <POD-NAME> not specified"
    exit 1
  fi

  if [ ! "${2}" ]; then
    echo "[error] <IF-NAME> not specified"
    exit 1
  fi

  PID=$(get_pid "${1}")
  sudo nsenter -t "${PID}" -n ip addr flush dev ${2}
}

# Help
show_net_help() {
  echo "-----------------------------------------------------------------"
  echo "Usage: ${NAME} net [addr|link|route|flush] <POD-NAME> [<IF-NAME>]"
  echo "-----------------------------------------------------------------"
  echo " - addr: show network address                                    "
  echo " - link: show network links                                      "
  echo " - route: show network routes                                    "
  echo " - flush: flush network address                                  "
  echo "-----------------------------------------------------------------"
}

case ${1} in
  list)
    show_list "${2}"
  ;;
  desc)
    show_desc "${2}"
  ;;
  cid)
    show_cid "${2}"
  ;;
  pid)
    show_pid "${2}"
  ;;
  net)
    show_net "${2}" "${3}" "${4}"
  ;;
  *)
    show_help
  ;;
esac
